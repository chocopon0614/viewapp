version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0

jobs:
  test:
      machine:
         image: ubuntu-2004:202201-02
      steps:
        - checkout
        - restore_cache:
            key: circleci-java-maven-{{ checksum "pom.xml" }}
        - run:
            command: mvn package
        - save_cache:
            paths:
              - ~/.m2
            key: circleci-java-maven-{{ checksum "pom.xml" }}
        - persist_to_workspace:
            root: '.'
            paths:
              - target
        - run:
            name: Save test results
            command: |
              mkdir -p ~/test-results/junit/
              find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
            when: always
        - store_test_results:
            path: ~/test-results
        - store_artifacts:
            path: ~/test-results/junit

  deploy:
      docker:
        - image: circleci/python:3.6-jessie
      working_directory: ~/
      steps:
        - attach_workspace:
            at: '.'
        - aws-cli/install
        - run:
            name: "authorize-security-group-ingress"
            command: |
              IP=`curl -s ifconfig.me`
              echo "#!/bin/bash" > ./sg.sh
              echo "aws ec2 authorize-security-group-ingress --group-id sg-0fd3983023d3016d5 --protocol tcp --port 22 --cidr ${IP}/32" >> ./sg.sh
              bash ./sg.sh
        - add_ssh_keys:
            fingerprints:
              - '3a:5c:be:07:a4:f0:df:4d:04:11:59:90:53:a4:58:55'
        - run: scp -o StrictHostKeyChecking=no /home/circleci/target/ViewApp.war ${USER_NAME}@${HOST_NAME}:~
        - run: ssh -o StrictHostKeyChecking=no ${USER_NAME}@${HOST_NAME} 'cp /home/chocopon1/ViewApp.war /opt/apache-tomcat/webapps | sudo systemctl restart tomcat'
        - run:
            name: "revoke-security-group-ingress"
            command: |
              IP=`curl -s ifconfig.me`
              echo "#!/bin/bash" > ./sg.sh
              echo "aws ec2 revoke-security-group-ingress --group-id sg-0fd3983023d3016d5 --protocol tcp --port 22 --cidr ${IP}/32" >> ./sg.sh
              bash ./sg.sh

workflows:
  test-deploy:
    jobs:
      - test
      - deploy:
            requires:
                - test
            filters:
                branches:
                  only: master
